generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Usuario {
  id        String @id @default(auto()) @map("_id") @db.ObjectId // Campo de ID único para MongoDB
  email     String @unique // El email sigue siendo único
  links     UserLink[] // Relación con el modelo intermedio
  createdAt DateTime  @default(now())
}

model Link {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  url           String    @unique
  shortUrl      String    @unique
  createdAt     DateTime  @default(now())
  redirectCount Int       @default(0)
  users         UserLink[] // Relación con el modelo intermedio
}

model UserLink {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  userId  String @db.ObjectId // Aquí puedes mantenerlo como un String, que se usará para referirse al ID del usuario
  linkId  String @db.ObjectId
  user    Usuario   @relation(fields: [userId], references: [id]) // Referencia al campo 'id' en Usuario
  link    Link   @relation(fields: [linkId], references: [id])

  @@unique([userId, linkId]) // Asegura que la combinación de userId y linkId sea única
}


model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([userId, credentialID])
}
